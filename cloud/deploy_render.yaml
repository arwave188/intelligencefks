# Render Deployment Configuration
# Para usar: conecte seu repositório GitHub ao Render e use este arquivo

services:
  - type: web
    name: ai-dev-api
    env: docker
    
    # Build configuration
    dockerfilePath: ./Dockerfile
    dockerContext: .
    
    # Runtime configuration
    plan: starter  # ou standard, pro
    region: oregon  # ou virginia, frankfurt, singapore
    
    # Environment variables
    envVars:
      # Porta obrigatória do Render
      - key: PORT
        value: 10000
      
      # LLM Configuration
      - key: LLM_BACKEND
        value: openai
      - key: LLM_MODEL
        value: gpt-4o-mini
      - key: OPENAI_API_KEY
        sync: false  # Definir no dashboard do Render
      - key: OPENAI_BASE_URL
        value: https://api.openai.com/v1
      - key: ANTHROPIC_API_KEY
        sync: false
      - key: TOGETHER_API_KEY
        sync: false
      - key: FIREWORKS_API_KEY
        sync: false
      - key: DEEPINFRA_API_KEY
        sync: false
      
      # Vector Database
      - key: VECTOR_BACKEND
        value: qdrant
      - key: QDRANT_URL
        sync: false  # Definir no dashboard
      - key: QDRANT_API_KEY
        sync: false
      - key: PINECONE_API_KEY
        sync: false
      - key: PINECONE_ENV
        value: us-east-1-aws
      - key: PINECONE_INDEX
        value: ai-dev-code
      
      # RAG Configuration
      - key: RAG_TOPK
        value: 8
      - key: RAG_MAX_PER_FILE
        value: 3
      - key: EMBEDDING_MODEL
        value: jinaai/jina-embeddings-v3
      
      # Agent Configuration
      - key: MAX_ITERS
        value: 5
      - key: LOG_LEVEL
        value: INFO
      - key: SANDBOX_TIMEOUT
        value: 180
      - key: SANDBOX_IMAGE
        value: python:3.11-slim
      
      # Public URL (será definido automaticamente pelo Render)
      - key: PUBLIC_BASE_URL
        fromService:
          type: web
          name: ai-dev-api
          property: host
    
    # Health check
    healthCheckPath: /health
    
    # Auto-deploy
    autoDeploy: true
    
    # Build command (opcional, usa Dockerfile por padrão)
    # buildCommand: docker build -t ai-dev .
    
    # Start command
    startCommand: bash cloud/start_web.sh
    
    # Disk storage (para logs e artefatos)
    disk:
      name: ai-dev-storage
      mountPath: /app/.runs
      sizeGB: 1

# Configurações adicionais
databases:
  # Se quiser usar PostgreSQL para metadados (opcional)
  # - name: ai-dev-db
  #   databaseName: aidev
  #   user: aidev
  #   plan: free

# Configurações de notificação (opcional)
# notifications:
#   - type: email
#     emails:
#       - your-email@example.com
#     events:
#       - deploy-succeeded
#       - deploy-failed

# Configurações de domínio customizado (opcional)
# domains:
#   - name: your-domain.com
#     type: apex
#   - name: www.your-domain.com
#     type: www
